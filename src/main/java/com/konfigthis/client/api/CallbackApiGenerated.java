/*
 * UploadThing REST API
 * UploadThing is the easiest way to add file uploads to your full stack TypeScript application. Many services have tried to build a \"better S3\", but in our opinion, none found the right compromise of ownership, flexibility and safety.
 *
 * The version of the OpenAPI document: 6.4.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.CallbackMarkUploadFailedRequest;
import com.konfigthis.client.model.CallbackMarkUploadFailedResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class CallbackApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public CallbackApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public CallbackApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        if (apiClient.getApiKeyAuth() == null) {
            throw new IllegalArgumentException("\"x-uploadthing-api-key\" is required but no API key was provided. Please set \"x-uploadthing-api-key\" with ApiClient#setApiKeyAuth(String).");
        }
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call markUploadFailedCall(String xUploadthingVersion, String xUploadthingFePackage, String xUploadthingBeAdapter, CallbackMarkUploadFailedRequest callbackMarkUploadFailedRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = callbackMarkUploadFailedRequest;

        // create path and map variables
        String localVarPath = "/failureCallback";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xUploadthingVersion != null) {
            localVarHeaderParams.put("x-uploadthing-version", localVarApiClient.parameterToString(xUploadthingVersion));
        }

        if (xUploadthingFePackage != null) {
            localVarHeaderParams.put("x-uploadthing-fe-package", localVarApiClient.parameterToString(xUploadthingFePackage));
        }

        if (xUploadthingBeAdapter != null) {
            localVarHeaderParams.put("x-uploadthing-be-adapter", localVarApiClient.parameterToString(xUploadthingBeAdapter));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call markUploadFailedValidateBeforeCall(String xUploadthingVersion, String xUploadthingFePackage, String xUploadthingBeAdapter, CallbackMarkUploadFailedRequest callbackMarkUploadFailedRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xUploadthingVersion' is set
        if (xUploadthingVersion == null) {
            throw new ApiException("Missing the required parameter 'xUploadthingVersion' when calling markUploadFailed(Async)");
        }

        return markUploadFailedCall(xUploadthingVersion, xUploadthingFePackage, xUploadthingBeAdapter, callbackMarkUploadFailedRequest, _callback);

    }


    private ApiResponse<CallbackMarkUploadFailedResponse> markUploadFailedWithHttpInfo(String xUploadthingVersion, String xUploadthingFePackage, String xUploadthingBeAdapter, CallbackMarkUploadFailedRequest callbackMarkUploadFailedRequest) throws ApiException {
        okhttp3.Call localVarCall = markUploadFailedValidateBeforeCall(xUploadthingVersion, xUploadthingFePackage, xUploadthingBeAdapter, callbackMarkUploadFailedRequest, null);
        Type localVarReturnType = new TypeToken<CallbackMarkUploadFailedResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call markUploadFailedAsync(String xUploadthingVersion, String xUploadthingFePackage, String xUploadthingBeAdapter, CallbackMarkUploadFailedRequest callbackMarkUploadFailedRequest, final ApiCallback<CallbackMarkUploadFailedResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = markUploadFailedValidateBeforeCall(xUploadthingVersion, xUploadthingFePackage, xUploadthingBeAdapter, callbackMarkUploadFailedRequest, _callback);
        Type localVarReturnType = new TypeToken<CallbackMarkUploadFailedResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class MarkUploadFailedRequestBuilder {
        private final String fileKey;
        private final String xUploadthingVersion;
        private String uploadId;
        private String xUploadthingFePackage;
        private String xUploadthingBeAdapter;

        private MarkUploadFailedRequestBuilder(String fileKey, String xUploadthingVersion) {
            this.fileKey = fileKey;
            this.xUploadthingVersion = xUploadthingVersion;
        }

        /**
         * Set uploadId
         * @param uploadId The uploadId, only applicable for multipart uploads. (optional)
         * @return MarkUploadFailedRequestBuilder
         */
        public MarkUploadFailedRequestBuilder uploadId(String uploadId) {
            this.uploadId = uploadId;
            return this;
        }
        
        /**
         * Set xUploadthingFePackage
         * @param xUploadthingFePackage  (optional)
         * @return MarkUploadFailedRequestBuilder
         */
        public MarkUploadFailedRequestBuilder xUploadthingFePackage(String xUploadthingFePackage) {
            this.xUploadthingFePackage = xUploadthingFePackage;
            return this;
        }
        
        /**
         * Set xUploadthingBeAdapter
         * @param xUploadthingBeAdapter  (optional)
         * @return MarkUploadFailedRequestBuilder
         */
        public MarkUploadFailedRequestBuilder xUploadthingBeAdapter(String xUploadthingBeAdapter) {
            this.xUploadthingBeAdapter = xUploadthingBeAdapter;
            return this;
        }
        
        /**
         * Build call for markUploadFailed
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully aborted or marked upload as failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            CallbackMarkUploadFailedRequest callbackMarkUploadFailedRequest = buildBodyParams();
            return markUploadFailedCall(xUploadthingVersion, xUploadthingFePackage, xUploadthingBeAdapter, callbackMarkUploadFailedRequest, _callback);
        }

        private CallbackMarkUploadFailedRequest buildBodyParams() {
            CallbackMarkUploadFailedRequest callbackMarkUploadFailedRequest = new CallbackMarkUploadFailedRequest();
            callbackMarkUploadFailedRequest.fileKey(this.fileKey);
            callbackMarkUploadFailedRequest.uploadId(this.uploadId);
            return callbackMarkUploadFailedRequest;
        }

        /**
         * Execute markUploadFailed request
         * @return CallbackMarkUploadFailedResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully aborted or marked upload as failed. </td><td>  -  </td></tr>
         </table>
         */
        public CallbackMarkUploadFailedResponse execute() throws ApiException {
            CallbackMarkUploadFailedRequest callbackMarkUploadFailedRequest = buildBodyParams();
            ApiResponse<CallbackMarkUploadFailedResponse> localVarResp = markUploadFailedWithHttpInfo(xUploadthingVersion, xUploadthingFePackage, xUploadthingBeAdapter, callbackMarkUploadFailedRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute markUploadFailed request with HTTP info returned
         * @return ApiResponse&lt;CallbackMarkUploadFailedResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully aborted or marked upload as failed. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CallbackMarkUploadFailedResponse> executeWithHttpInfo() throws ApiException {
            CallbackMarkUploadFailedRequest callbackMarkUploadFailedRequest = buildBodyParams();
            return markUploadFailedWithHttpInfo(xUploadthingVersion, xUploadthingFePackage, xUploadthingBeAdapter, callbackMarkUploadFailedRequest);
        }

        /**
         * Execute markUploadFailed request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully aborted or marked upload as failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CallbackMarkUploadFailedResponse> _callback) throws ApiException {
            CallbackMarkUploadFailedRequest callbackMarkUploadFailedRequest = buildBodyParams();
            return markUploadFailedAsync(xUploadthingVersion, xUploadthingFePackage, xUploadthingBeAdapter, callbackMarkUploadFailedRequest, _callback);
        }
    }

    /**
     * 
     * Mark an upload as failed, or abort a multipart upload. This will free up resources and revert the storage quota.
     * @param xUploadthingVersion  (required)
     * @return MarkUploadFailedRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully aborted or marked upload as failed. </td><td>  -  </td></tr>
     </table>
     */
    public MarkUploadFailedRequestBuilder markUploadFailed(String fileKey, String xUploadthingVersion) throws IllegalArgumentException {
        if (fileKey == null) throw new IllegalArgumentException("\"fileKey\" is required but got null");
            

        if (xUploadthingVersion == null) throw new IllegalArgumentException("\"xUploadthingVersion\" is required but got null");
            

        return new MarkUploadFailedRequestBuilder(fileKey, xUploadthingVersion);
    }
}
