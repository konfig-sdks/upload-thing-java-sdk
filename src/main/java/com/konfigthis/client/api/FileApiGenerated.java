/*
 * UploadThing REST API
 * UploadThing is the easiest way to add file uploads to your full stack TypeScript application. Many services have tried to build a \"better S3\", but in our opinion, none found the right compromise of ownership, flexibility and safety.
 *
 * The version of the OpenAPI document: 6.4.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.FileGetFileUrlsRequest;
import com.konfigthis.client.model.FileGetFileUrlsResponse;
import com.konfigthis.client.model.FileListFilesRequest;
import com.konfigthis.client.model.FileListFilesResponse;
import com.konfigthis.client.model.FileMarkForDeletionRequest;
import com.konfigthis.client.model.FileMarkForDeletionResponse;
import com.konfigthis.client.model.FileRenameFilesRequest;
import com.konfigthis.client.model.FileRenameFilesRequestUpdatesInner;
import com.konfigthis.client.model.FileRenameFilesResponse;
import com.konfigthis.client.model.FileRequestPresignedUrlRequest;
import com.konfigthis.client.model.FileRequestPresignedUrlResponse;
import com.konfigthis.client.model.FileRequestPresignedUrlsRequest;
import com.konfigthis.client.model.FileRequestPresignedUrlsRequestFilesInner;
import com.konfigthis.client.model.FileRequestPresignedUrlsResponse;
import com.konfigthis.client.model.FileUpdateFileNameRequest;
import com.konfigthis.client.model.FileUpdateFileNameResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class FileApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public FileApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public FileApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        if (apiClient.getApiKeyAuth() == null) {
            throw new IllegalArgumentException("\"x-uploadthing-api-key\" is required but no API key was provided. Please set \"x-uploadthing-api-key\" with ApiClient#setApiKeyAuth(String).");
        }
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call getFileUrlsCall(String xUploadthingVersion, String xUploadthingFePackage, String xUploadthingBeAdapter, FileGetFileUrlsRequest fileGetFileUrlsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = fileGetFileUrlsRequest;

        // create path and map variables
        String localVarPath = "/getFileUrl";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xUploadthingVersion != null) {
            localVarHeaderParams.put("x-uploadthing-version", localVarApiClient.parameterToString(xUploadthingVersion));
        }

        if (xUploadthingFePackage != null) {
            localVarHeaderParams.put("x-uploadthing-fe-package", localVarApiClient.parameterToString(xUploadthingFePackage));
        }

        if (xUploadthingBeAdapter != null) {
            localVarHeaderParams.put("x-uploadthing-be-adapter", localVarApiClient.parameterToString(xUploadthingBeAdapter));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call getFileUrlsValidateBeforeCall(String xUploadthingVersion, String xUploadthingFePackage, String xUploadthingBeAdapter, FileGetFileUrlsRequest fileGetFileUrlsRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xUploadthingVersion' is set
        if (xUploadthingVersion == null) {
            throw new ApiException("Missing the required parameter 'xUploadthingVersion' when calling getFileUrls(Async)");
        }

        return getFileUrlsCall(xUploadthingVersion, xUploadthingFePackage, xUploadthingBeAdapter, fileGetFileUrlsRequest, _callback);

    }


    private ApiResponse<FileGetFileUrlsResponse> getFileUrlsWithHttpInfo(String xUploadthingVersion, String xUploadthingFePackage, String xUploadthingBeAdapter, FileGetFileUrlsRequest fileGetFileUrlsRequest) throws ApiException {
        okhttp3.Call localVarCall = getFileUrlsValidateBeforeCall(xUploadthingVersion, xUploadthingFePackage, xUploadthingBeAdapter, fileGetFileUrlsRequest, null);
        Type localVarReturnType = new TypeToken<FileGetFileUrlsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getFileUrlsAsync(String xUploadthingVersion, String xUploadthingFePackage, String xUploadthingBeAdapter, FileGetFileUrlsRequest fileGetFileUrlsRequest, final ApiCallback<FileGetFileUrlsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getFileUrlsValidateBeforeCall(xUploadthingVersion, xUploadthingFePackage, xUploadthingBeAdapter, fileGetFileUrlsRequest, _callback);
        Type localVarReturnType = new TypeToken<FileGetFileUrlsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetFileUrlsRequestBuilder {
        private final String xUploadthingVersion;
        private List<String> files;
        private List<String> fileKeys;
        private List<String> customIds;
        private String xUploadthingFePackage;
        private String xUploadthingBeAdapter;

        private GetFileUrlsRequestBuilder(String xUploadthingVersion) {
            this.xUploadthingVersion = xUploadthingVersion;
        }

        /**
         * Set files
         * @param files  (optional)
         * @return GetFileUrlsRequestBuilder
         */
        public GetFileUrlsRequestBuilder files(List<String> files) {
            this.files = files;
            return this;
        }
        
        /**
         * Set fileKeys
         * @param fileKeys  (optional)
         * @return GetFileUrlsRequestBuilder
         */
        public GetFileUrlsRequestBuilder fileKeys(List<String> fileKeys) {
            this.fileKeys = fileKeys;
            return this;
        }
        
        /**
         * Set customIds
         * @param customIds  (optional)
         * @return GetFileUrlsRequestBuilder
         */
        public GetFileUrlsRequestBuilder customIds(List<String> customIds) {
            this.customIds = customIds;
            return this;
        }
        
        /**
         * Set xUploadthingFePackage
         * @param xUploadthingFePackage  (optional)
         * @return GetFileUrlsRequestBuilder
         */
        public GetFileUrlsRequestBuilder xUploadthingFePackage(String xUploadthingFePackage) {
            this.xUploadthingFePackage = xUploadthingFePackage;
            return this;
        }
        
        /**
         * Set xUploadthingBeAdapter
         * @param xUploadthingBeAdapter  (optional)
         * @return GetFileUrlsRequestBuilder
         */
        public GetFileUrlsRequestBuilder xUploadthingBeAdapter(String xUploadthingBeAdapter) {
            this.xUploadthingBeAdapter = xUploadthingBeAdapter;
            return this;
        }
        
        /**
         * Build call for getFileUrls
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully retrieved file URLs. </td><td>  -  </td></tr>
         </table>
         * @deprecated
         */
        @Deprecated
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            FileGetFileUrlsRequest fileGetFileUrlsRequest = buildBodyParams();
            return getFileUrlsCall(xUploadthingVersion, xUploadthingFePackage, xUploadthingBeAdapter, fileGetFileUrlsRequest, _callback);
        }

        private FileGetFileUrlsRequest buildBodyParams() {
            FileGetFileUrlsRequest fileGetFileUrlsRequest = new FileGetFileUrlsRequest();
            fileGetFileUrlsRequest.files(this.files);
            fileGetFileUrlsRequest.fileKeys(this.fileKeys);
            fileGetFileUrlsRequest.customIds(this.customIds);
            return fileGetFileUrlsRequest;
        }

        /**
         * Execute getFileUrls request
         * @return FileGetFileUrlsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully retrieved file URLs. </td><td>  -  </td></tr>
         </table>
         * @deprecated
         */
        @Deprecated
        public FileGetFileUrlsResponse execute() throws ApiException {
            FileGetFileUrlsRequest fileGetFileUrlsRequest = buildBodyParams();
            ApiResponse<FileGetFileUrlsResponse> localVarResp = getFileUrlsWithHttpInfo(xUploadthingVersion, xUploadthingFePackage, xUploadthingBeAdapter, fileGetFileUrlsRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getFileUrls request with HTTP info returned
         * @return ApiResponse&lt;FileGetFileUrlsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully retrieved file URLs. </td><td>  -  </td></tr>
         </table>
         * @deprecated
         */
        @Deprecated
        public ApiResponse<FileGetFileUrlsResponse> executeWithHttpInfo() throws ApiException {
            FileGetFileUrlsRequest fileGetFileUrlsRequest = buildBodyParams();
            return getFileUrlsWithHttpInfo(xUploadthingVersion, xUploadthingFePackage, xUploadthingBeAdapter, fileGetFileUrlsRequest);
        }

        /**
         * Execute getFileUrls request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully retrieved file URLs. </td><td>  -  </td></tr>
         </table>
         * @deprecated
         */
        @Deprecated
        public okhttp3.Call executeAsync(final ApiCallback<FileGetFileUrlsResponse> _callback) throws ApiException {
            FileGetFileUrlsRequest fileGetFileUrlsRequest = buildBodyParams();
            return getFileUrlsAsync(xUploadthingVersion, xUploadthingFePackage, xUploadthingBeAdapter, fileGetFileUrlsRequest, _callback);
        }
    }

    /**
     * 
     * Get a list of URLs for given file keys. This API is deprecated, use &#x60;https://utfs.io/f/FILE_KEY&#x60;.
     * @param xUploadthingVersion  (required)
     * @return GetFileUrlsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved file URLs. </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public GetFileUrlsRequestBuilder getFileUrls(String xUploadthingVersion) throws IllegalArgumentException {
        if (xUploadthingVersion == null) throw new IllegalArgumentException("\"xUploadthingVersion\" is required but got null");
            

        return new GetFileUrlsRequestBuilder(xUploadthingVersion);
    }
    private okhttp3.Call listFilesCall(String xUploadthingVersion, String xUploadthingFePackage, String xUploadthingBeAdapter, FileListFilesRequest fileListFilesRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = fileListFilesRequest;

        // create path and map variables
        String localVarPath = "/listFiles";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xUploadthingVersion != null) {
            localVarHeaderParams.put("x-uploadthing-version", localVarApiClient.parameterToString(xUploadthingVersion));
        }

        if (xUploadthingFePackage != null) {
            localVarHeaderParams.put("x-uploadthing-fe-package", localVarApiClient.parameterToString(xUploadthingFePackage));
        }

        if (xUploadthingBeAdapter != null) {
            localVarHeaderParams.put("x-uploadthing-be-adapter", localVarApiClient.parameterToString(xUploadthingBeAdapter));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listFilesValidateBeforeCall(String xUploadthingVersion, String xUploadthingFePackage, String xUploadthingBeAdapter, FileListFilesRequest fileListFilesRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xUploadthingVersion' is set
        if (xUploadthingVersion == null) {
            throw new ApiException("Missing the required parameter 'xUploadthingVersion' when calling listFiles(Async)");
        }

        return listFilesCall(xUploadthingVersion, xUploadthingFePackage, xUploadthingBeAdapter, fileListFilesRequest, _callback);

    }


    private ApiResponse<FileListFilesResponse> listFilesWithHttpInfo(String xUploadthingVersion, String xUploadthingFePackage, String xUploadthingBeAdapter, FileListFilesRequest fileListFilesRequest) throws ApiException {
        okhttp3.Call localVarCall = listFilesValidateBeforeCall(xUploadthingVersion, xUploadthingFePackage, xUploadthingBeAdapter, fileListFilesRequest, null);
        Type localVarReturnType = new TypeToken<FileListFilesResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listFilesAsync(String xUploadthingVersion, String xUploadthingFePackage, String xUploadthingBeAdapter, FileListFilesRequest fileListFilesRequest, final ApiCallback<FileListFilesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listFilesValidateBeforeCall(xUploadthingVersion, xUploadthingFePackage, xUploadthingBeAdapter, fileListFilesRequest, _callback);
        Type localVarReturnType = new TypeToken<FileListFilesResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListFilesRequestBuilder {
        private final Double limit;
        private final Double offset;
        private final String xUploadthingVersion;
        private String xUploadthingFePackage;
        private String xUploadthingBeAdapter;

        private ListFilesRequestBuilder(double limit, double offset, String xUploadthingVersion) {
            this.limit = limit;
            this.offset = offset;
            this.xUploadthingVersion = xUploadthingVersion;
        }

        /**
         * Set xUploadthingFePackage
         * @param xUploadthingFePackage  (optional)
         * @return ListFilesRequestBuilder
         */
        public ListFilesRequestBuilder xUploadthingFePackage(String xUploadthingFePackage) {
            this.xUploadthingFePackage = xUploadthingFePackage;
            return this;
        }
        
        /**
         * Set xUploadthingBeAdapter
         * @param xUploadthingBeAdapter  (optional)
         * @return ListFilesRequestBuilder
         */
        public ListFilesRequestBuilder xUploadthingBeAdapter(String xUploadthingBeAdapter) {
            this.xUploadthingBeAdapter = xUploadthingBeAdapter;
            return this;
        }
        
        /**
         * Build call for listFiles
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully retrieved files. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            FileListFilesRequest fileListFilesRequest = buildBodyParams();
            return listFilesCall(xUploadthingVersion, xUploadthingFePackage, xUploadthingBeAdapter, fileListFilesRequest, _callback);
        }

        private FileListFilesRequest buildBodyParams() {
            FileListFilesRequest fileListFilesRequest = new FileListFilesRequest();
            fileListFilesRequest.limit(this.limit);
            fileListFilesRequest.offset(this.offset);
            return fileListFilesRequest;
        }

        /**
         * Execute listFiles request
         * @return FileListFilesResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully retrieved files. </td><td>  -  </td></tr>
         </table>
         */
        public FileListFilesResponse execute() throws ApiException {
            FileListFilesRequest fileListFilesRequest = buildBodyParams();
            ApiResponse<FileListFilesResponse> localVarResp = listFilesWithHttpInfo(xUploadthingVersion, xUploadthingFePackage, xUploadthingBeAdapter, fileListFilesRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listFiles request with HTTP info returned
         * @return ApiResponse&lt;FileListFilesResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully retrieved files. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<FileListFilesResponse> executeWithHttpInfo() throws ApiException {
            FileListFilesRequest fileListFilesRequest = buildBodyParams();
            return listFilesWithHttpInfo(xUploadthingVersion, xUploadthingFePackage, xUploadthingBeAdapter, fileListFilesRequest);
        }

        /**
         * Execute listFiles request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully retrieved files. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<FileListFilesResponse> _callback) throws ApiException {
            FileListFilesRequest fileListFilesRequest = buildBodyParams();
            return listFilesAsync(xUploadthingVersion, xUploadthingFePackage, xUploadthingBeAdapter, fileListFilesRequest, _callback);
        }
    }

    /**
     * 
     * List files for the current app. Response is paginated.
     * @param xUploadthingVersion  (required)
     * @return ListFilesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved files. </td><td>  -  </td></tr>
     </table>
     */
    public ListFilesRequestBuilder listFiles(double limit, double offset, String xUploadthingVersion) throws IllegalArgumentException {
        
        
        if (xUploadthingVersion == null) throw new IllegalArgumentException("\"xUploadthingVersion\" is required but got null");
            

        return new ListFilesRequestBuilder(limit, offset, xUploadthingVersion);
    }
    private okhttp3.Call markForDeletionCall(String xUploadthingVersion, String xUploadthingFePackage, String xUploadthingBeAdapter, FileMarkForDeletionRequest fileMarkForDeletionRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = fileMarkForDeletionRequest;

        // create path and map variables
        String localVarPath = "/deleteFile";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xUploadthingVersion != null) {
            localVarHeaderParams.put("x-uploadthing-version", localVarApiClient.parameterToString(xUploadthingVersion));
        }

        if (xUploadthingFePackage != null) {
            localVarHeaderParams.put("x-uploadthing-fe-package", localVarApiClient.parameterToString(xUploadthingFePackage));
        }

        if (xUploadthingBeAdapter != null) {
            localVarHeaderParams.put("x-uploadthing-be-adapter", localVarApiClient.parameterToString(xUploadthingBeAdapter));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call markForDeletionValidateBeforeCall(String xUploadthingVersion, String xUploadthingFePackage, String xUploadthingBeAdapter, FileMarkForDeletionRequest fileMarkForDeletionRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xUploadthingVersion' is set
        if (xUploadthingVersion == null) {
            throw new ApiException("Missing the required parameter 'xUploadthingVersion' when calling markForDeletion(Async)");
        }

        return markForDeletionCall(xUploadthingVersion, xUploadthingFePackage, xUploadthingBeAdapter, fileMarkForDeletionRequest, _callback);

    }


    private ApiResponse<FileMarkForDeletionResponse> markForDeletionWithHttpInfo(String xUploadthingVersion, String xUploadthingFePackage, String xUploadthingBeAdapter, FileMarkForDeletionRequest fileMarkForDeletionRequest) throws ApiException {
        okhttp3.Call localVarCall = markForDeletionValidateBeforeCall(xUploadthingVersion, xUploadthingFePackage, xUploadthingBeAdapter, fileMarkForDeletionRequest, null);
        Type localVarReturnType = new TypeToken<FileMarkForDeletionResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call markForDeletionAsync(String xUploadthingVersion, String xUploadthingFePackage, String xUploadthingBeAdapter, FileMarkForDeletionRequest fileMarkForDeletionRequest, final ApiCallback<FileMarkForDeletionResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = markForDeletionValidateBeforeCall(xUploadthingVersion, xUploadthingFePackage, xUploadthingBeAdapter, fileMarkForDeletionRequest, _callback);
        Type localVarReturnType = new TypeToken<FileMarkForDeletionResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class MarkForDeletionRequestBuilder {
        private final String xUploadthingVersion;
        private List<String> files;
        private List<String> fileKeys;
        private List<String> customIds;
        private String xUploadthingFePackage;
        private String xUploadthingBeAdapter;

        private MarkForDeletionRequestBuilder(String xUploadthingVersion) {
            this.xUploadthingVersion = xUploadthingVersion;
        }

        /**
         * Set files
         * @param files  (optional)
         * @return MarkForDeletionRequestBuilder
         */
        public MarkForDeletionRequestBuilder files(List<String> files) {
            this.files = files;
            return this;
        }
        
        /**
         * Set fileKeys
         * @param fileKeys  (optional)
         * @return MarkForDeletionRequestBuilder
         */
        public MarkForDeletionRequestBuilder fileKeys(List<String> fileKeys) {
            this.fileKeys = fileKeys;
            return this;
        }
        
        /**
         * Set customIds
         * @param customIds  (optional)
         * @return MarkForDeletionRequestBuilder
         */
        public MarkForDeletionRequestBuilder customIds(List<String> customIds) {
            this.customIds = customIds;
            return this;
        }
        
        /**
         * Set xUploadthingFePackage
         * @param xUploadthingFePackage  (optional)
         * @return MarkForDeletionRequestBuilder
         */
        public MarkForDeletionRequestBuilder xUploadthingFePackage(String xUploadthingFePackage) {
            this.xUploadthingFePackage = xUploadthingFePackage;
            return this;
        }
        
        /**
         * Set xUploadthingBeAdapter
         * @param xUploadthingBeAdapter  (optional)
         * @return MarkForDeletionRequestBuilder
         */
        public MarkForDeletionRequestBuilder xUploadthingBeAdapter(String xUploadthingBeAdapter) {
            this.xUploadthingBeAdapter = xUploadthingBeAdapter;
            return this;
        }
        
        /**
         * Build call for markForDeletion
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully marked file for deletion. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            FileMarkForDeletionRequest fileMarkForDeletionRequest = buildBodyParams();
            return markForDeletionCall(xUploadthingVersion, xUploadthingFePackage, xUploadthingBeAdapter, fileMarkForDeletionRequest, _callback);
        }

        private FileMarkForDeletionRequest buildBodyParams() {
            FileMarkForDeletionRequest fileMarkForDeletionRequest = new FileMarkForDeletionRequest();
            fileMarkForDeletionRequest.files(this.files);
            fileMarkForDeletionRequest.fileKeys(this.fileKeys);
            fileMarkForDeletionRequest.customIds(this.customIds);
            return fileMarkForDeletionRequest;
        }

        /**
         * Execute markForDeletion request
         * @return FileMarkForDeletionResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully marked file for deletion. </td><td>  -  </td></tr>
         </table>
         */
        public FileMarkForDeletionResponse execute() throws ApiException {
            FileMarkForDeletionRequest fileMarkForDeletionRequest = buildBodyParams();
            ApiResponse<FileMarkForDeletionResponse> localVarResp = markForDeletionWithHttpInfo(xUploadthingVersion, xUploadthingFePackage, xUploadthingBeAdapter, fileMarkForDeletionRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute markForDeletion request with HTTP info returned
         * @return ApiResponse&lt;FileMarkForDeletionResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully marked file for deletion. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<FileMarkForDeletionResponse> executeWithHttpInfo() throws ApiException {
            FileMarkForDeletionRequest fileMarkForDeletionRequest = buildBodyParams();
            return markForDeletionWithHttpInfo(xUploadthingVersion, xUploadthingFePackage, xUploadthingBeAdapter, fileMarkForDeletionRequest);
        }

        /**
         * Execute markForDeletion request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully marked file for deletion. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<FileMarkForDeletionResponse> _callback) throws ApiException {
            FileMarkForDeletionRequest fileMarkForDeletionRequest = buildBodyParams();
            return markForDeletionAsync(xUploadthingVersion, xUploadthingFePackage, xUploadthingBeAdapter, fileMarkForDeletionRequest, _callback);
        }
    }

    /**
     * 
     * Mark files for deletion. The files will be deleted at the storage provider shortly after.
     * @param xUploadthingVersion  (required)
     * @return MarkForDeletionRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully marked file for deletion. </td><td>  -  </td></tr>
     </table>
     */
    public MarkForDeletionRequestBuilder markForDeletion(String xUploadthingVersion) throws IllegalArgumentException {
        if (xUploadthingVersion == null) throw new IllegalArgumentException("\"xUploadthingVersion\" is required but got null");
            

        return new MarkForDeletionRequestBuilder(xUploadthingVersion);
    }
    private okhttp3.Call renameFilesCall(String xUploadthingVersion, String xUploadthingFePackage, String xUploadthingBeAdapter, FileRenameFilesRequest fileRenameFilesRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = fileRenameFilesRequest;

        // create path and map variables
        String localVarPath = "/renameFiles";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xUploadthingVersion != null) {
            localVarHeaderParams.put("x-uploadthing-version", localVarApiClient.parameterToString(xUploadthingVersion));
        }

        if (xUploadthingFePackage != null) {
            localVarHeaderParams.put("x-uploadthing-fe-package", localVarApiClient.parameterToString(xUploadthingFePackage));
        }

        if (xUploadthingBeAdapter != null) {
            localVarHeaderParams.put("x-uploadthing-be-adapter", localVarApiClient.parameterToString(xUploadthingBeAdapter));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call renameFilesValidateBeforeCall(String xUploadthingVersion, String xUploadthingFePackage, String xUploadthingBeAdapter, FileRenameFilesRequest fileRenameFilesRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xUploadthingVersion' is set
        if (xUploadthingVersion == null) {
            throw new ApiException("Missing the required parameter 'xUploadthingVersion' when calling renameFiles(Async)");
        }

        return renameFilesCall(xUploadthingVersion, xUploadthingFePackage, xUploadthingBeAdapter, fileRenameFilesRequest, _callback);

    }


    private ApiResponse<FileRenameFilesResponse> renameFilesWithHttpInfo(String xUploadthingVersion, String xUploadthingFePackage, String xUploadthingBeAdapter, FileRenameFilesRequest fileRenameFilesRequest) throws ApiException {
        okhttp3.Call localVarCall = renameFilesValidateBeforeCall(xUploadthingVersion, xUploadthingFePackage, xUploadthingBeAdapter, fileRenameFilesRequest, null);
        Type localVarReturnType = new TypeToken<FileRenameFilesResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call renameFilesAsync(String xUploadthingVersion, String xUploadthingFePackage, String xUploadthingBeAdapter, FileRenameFilesRequest fileRenameFilesRequest, final ApiCallback<FileRenameFilesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = renameFilesValidateBeforeCall(xUploadthingVersion, xUploadthingFePackage, xUploadthingBeAdapter, fileRenameFilesRequest, _callback);
        Type localVarReturnType = new TypeToken<FileRenameFilesResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class RenameFilesRequestBuilder {
        private final List<FileRenameFilesRequestUpdatesInner> updates;
        private final String xUploadthingVersion;
        private String xUploadthingFePackage;
        private String xUploadthingBeAdapter;

        private RenameFilesRequestBuilder(List<FileRenameFilesRequestUpdatesInner> updates, String xUploadthingVersion) {
            this.updates = updates;
            this.xUploadthingVersion = xUploadthingVersion;
        }

        /**
         * Set xUploadthingFePackage
         * @param xUploadthingFePackage  (optional)
         * @return RenameFilesRequestBuilder
         */
        public RenameFilesRequestBuilder xUploadthingFePackage(String xUploadthingFePackage) {
            this.xUploadthingFePackage = xUploadthingFePackage;
            return this;
        }
        
        /**
         * Set xUploadthingBeAdapter
         * @param xUploadthingBeAdapter  (optional)
         * @return RenameFilesRequestBuilder
         */
        public RenameFilesRequestBuilder xUploadthingBeAdapter(String xUploadthingBeAdapter) {
            this.xUploadthingBeAdapter = xUploadthingBeAdapter;
            return this;
        }
        
        /**
         * Build call for renameFiles
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully renamed files. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            FileRenameFilesRequest fileRenameFilesRequest = buildBodyParams();
            return renameFilesCall(xUploadthingVersion, xUploadthingFePackage, xUploadthingBeAdapter, fileRenameFilesRequest, _callback);
        }

        private FileRenameFilesRequest buildBodyParams() {
            FileRenameFilesRequest fileRenameFilesRequest = new FileRenameFilesRequest();
            fileRenameFilesRequest.updates(this.updates);
            return fileRenameFilesRequest;
        }

        /**
         * Execute renameFiles request
         * @return FileRenameFilesResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully renamed files. </td><td>  -  </td></tr>
         </table>
         */
        public FileRenameFilesResponse execute() throws ApiException {
            FileRenameFilesRequest fileRenameFilesRequest = buildBodyParams();
            ApiResponse<FileRenameFilesResponse> localVarResp = renameFilesWithHttpInfo(xUploadthingVersion, xUploadthingFePackage, xUploadthingBeAdapter, fileRenameFilesRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute renameFiles request with HTTP info returned
         * @return ApiResponse&lt;FileRenameFilesResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully renamed files. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<FileRenameFilesResponse> executeWithHttpInfo() throws ApiException {
            FileRenameFilesRequest fileRenameFilesRequest = buildBodyParams();
            return renameFilesWithHttpInfo(xUploadthingVersion, xUploadthingFePackage, xUploadthingBeAdapter, fileRenameFilesRequest);
        }

        /**
         * Execute renameFiles request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully renamed files. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<FileRenameFilesResponse> _callback) throws ApiException {
            FileRenameFilesRequest fileRenameFilesRequest = buildBodyParams();
            return renameFilesAsync(xUploadthingVersion, xUploadthingFePackage, xUploadthingBeAdapter, fileRenameFilesRequest, _callback);
        }
    }

    /**
     * 
     * Rename files.
     * @param xUploadthingVersion  (required)
     * @return RenameFilesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully renamed files. </td><td>  -  </td></tr>
     </table>
     */
    public RenameFilesRequestBuilder renameFiles(List<FileRenameFilesRequestUpdatesInner> updates, String xUploadthingVersion) throws IllegalArgumentException {
        if (updates == null) throw new IllegalArgumentException("\"updates\" is required but got null");
        if (xUploadthingVersion == null) throw new IllegalArgumentException("\"xUploadthingVersion\" is required but got null");
            

        return new RenameFilesRequestBuilder(updates, xUploadthingVersion);
    }
    private okhttp3.Call requestPresignedUrlCall(String xUploadthingVersion, String xUploadthingFePackage, String xUploadthingBeAdapter, FileRequestPresignedUrlRequest fileRequestPresignedUrlRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = fileRequestPresignedUrlRequest;

        // create path and map variables
        String localVarPath = "/requestFileAccess";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xUploadthingVersion != null) {
            localVarHeaderParams.put("x-uploadthing-version", localVarApiClient.parameterToString(xUploadthingVersion));
        }

        if (xUploadthingFePackage != null) {
            localVarHeaderParams.put("x-uploadthing-fe-package", localVarApiClient.parameterToString(xUploadthingFePackage));
        }

        if (xUploadthingBeAdapter != null) {
            localVarHeaderParams.put("x-uploadthing-be-adapter", localVarApiClient.parameterToString(xUploadthingBeAdapter));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call requestPresignedUrlValidateBeforeCall(String xUploadthingVersion, String xUploadthingFePackage, String xUploadthingBeAdapter, FileRequestPresignedUrlRequest fileRequestPresignedUrlRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xUploadthingVersion' is set
        if (xUploadthingVersion == null) {
            throw new ApiException("Missing the required parameter 'xUploadthingVersion' when calling requestPresignedUrl(Async)");
        }

        return requestPresignedUrlCall(xUploadthingVersion, xUploadthingFePackage, xUploadthingBeAdapter, fileRequestPresignedUrlRequest, _callback);

    }


    private ApiResponse<FileRequestPresignedUrlResponse> requestPresignedUrlWithHttpInfo(String xUploadthingVersion, String xUploadthingFePackage, String xUploadthingBeAdapter, FileRequestPresignedUrlRequest fileRequestPresignedUrlRequest) throws ApiException {
        okhttp3.Call localVarCall = requestPresignedUrlValidateBeforeCall(xUploadthingVersion, xUploadthingFePackage, xUploadthingBeAdapter, fileRequestPresignedUrlRequest, null);
        Type localVarReturnType = new TypeToken<FileRequestPresignedUrlResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call requestPresignedUrlAsync(String xUploadthingVersion, String xUploadthingFePackage, String xUploadthingBeAdapter, FileRequestPresignedUrlRequest fileRequestPresignedUrlRequest, final ApiCallback<FileRequestPresignedUrlResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = requestPresignedUrlValidateBeforeCall(xUploadthingVersion, xUploadthingFePackage, xUploadthingBeAdapter, fileRequestPresignedUrlRequest, _callback);
        Type localVarReturnType = new TypeToken<FileRequestPresignedUrlResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class RequestPresignedUrlRequestBuilder {
        private final String xUploadthingVersion;
        private String fileKey;
        private String customId;
        private Double expiresIn;
        private String xUploadthingFePackage;
        private String xUploadthingBeAdapter;

        private RequestPresignedUrlRequestBuilder(String xUploadthingVersion) {
            this.xUploadthingVersion = xUploadthingVersion;
        }

        /**
         * Set fileKey
         * @param fileKey  (optional)
         * @return RequestPresignedUrlRequestBuilder
         */
        public RequestPresignedUrlRequestBuilder fileKey(String fileKey) {
            this.fileKey = fileKey;
            return this;
        }
        
        /**
         * Set customId
         * @param customId  (optional)
         * @return RequestPresignedUrlRequestBuilder
         */
        public RequestPresignedUrlRequestBuilder customId(String customId) {
            this.customId = customId;
            return this;
        }
        
        /**
         * Set expiresIn
         * @param expiresIn  (optional)
         * @return RequestPresignedUrlRequestBuilder
         */
        public RequestPresignedUrlRequestBuilder expiresIn(Double expiresIn) {
            this.expiresIn = expiresIn;
            return this;
        }
        
        /**
         * Set xUploadthingFePackage
         * @param xUploadthingFePackage  (optional)
         * @return RequestPresignedUrlRequestBuilder
         */
        public RequestPresignedUrlRequestBuilder xUploadthingFePackage(String xUploadthingFePackage) {
            this.xUploadthingFePackage = xUploadthingFePackage;
            return this;
        }
        
        /**
         * Set xUploadthingBeAdapter
         * @param xUploadthingBeAdapter  (optional)
         * @return RequestPresignedUrlRequestBuilder
         */
        public RequestPresignedUrlRequestBuilder xUploadthingBeAdapter(String xUploadthingBeAdapter) {
            this.xUploadthingBeAdapter = xUploadthingBeAdapter;
            return this;
        }
        
        /**
         * Build call for requestPresignedUrl
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully retrieved a presigned GET URL. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            FileRequestPresignedUrlRequest fileRequestPresignedUrlRequest = buildBodyParams();
            return requestPresignedUrlCall(xUploadthingVersion, xUploadthingFePackage, xUploadthingBeAdapter, fileRequestPresignedUrlRequest, _callback);
        }

        private FileRequestPresignedUrlRequest buildBodyParams() {
            FileRequestPresignedUrlRequest fileRequestPresignedUrlRequest = new FileRequestPresignedUrlRequest();
            fileRequestPresignedUrlRequest.fileKey(this.fileKey);
            fileRequestPresignedUrlRequest.customId(this.customId);
            fileRequestPresignedUrlRequest.expiresIn(this.expiresIn);
            return fileRequestPresignedUrlRequest;
        }

        /**
         * Execute requestPresignedUrl request
         * @return FileRequestPresignedUrlResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully retrieved a presigned GET URL. </td><td>  -  </td></tr>
         </table>
         */
        public FileRequestPresignedUrlResponse execute() throws ApiException {
            FileRequestPresignedUrlRequest fileRequestPresignedUrlRequest = buildBodyParams();
            ApiResponse<FileRequestPresignedUrlResponse> localVarResp = requestPresignedUrlWithHttpInfo(xUploadthingVersion, xUploadthingFePackage, xUploadthingBeAdapter, fileRequestPresignedUrlRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute requestPresignedUrl request with HTTP info returned
         * @return ApiResponse&lt;FileRequestPresignedUrlResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully retrieved a presigned GET URL. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<FileRequestPresignedUrlResponse> executeWithHttpInfo() throws ApiException {
            FileRequestPresignedUrlRequest fileRequestPresignedUrlRequest = buildBodyParams();
            return requestPresignedUrlWithHttpInfo(xUploadthingVersion, xUploadthingFePackage, xUploadthingBeAdapter, fileRequestPresignedUrlRequest);
        }

        /**
         * Execute requestPresignedUrl request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully retrieved a presigned GET URL. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<FileRequestPresignedUrlResponse> _callback) throws ApiException {
            FileRequestPresignedUrlRequest fileRequestPresignedUrlRequest = buildBodyParams();
            return requestPresignedUrlAsync(xUploadthingVersion, xUploadthingFePackage, xUploadthingBeAdapter, fileRequestPresignedUrlRequest, _callback);
        }
    }

    /**
     * 
     * Request a presigned GET url for a private file.
     * @param xUploadthingVersion  (required)
     * @return RequestPresignedUrlRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved a presigned GET URL. </td><td>  -  </td></tr>
     </table>
     */
    public RequestPresignedUrlRequestBuilder requestPresignedUrl(String xUploadthingVersion) throws IllegalArgumentException {
        if (xUploadthingVersion == null) throw new IllegalArgumentException("\"xUploadthingVersion\" is required but got null");
            

        return new RequestPresignedUrlRequestBuilder(xUploadthingVersion);
    }
    private okhttp3.Call requestPresignedUrlsCall(String xUploadthingVersion, String xUploadthingFePackage, String xUploadthingBeAdapter, FileRequestPresignedUrlsRequest fileRequestPresignedUrlsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = fileRequestPresignedUrlsRequest;

        // create path and map variables
        String localVarPath = "/uploadFiles";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xUploadthingVersion != null) {
            localVarHeaderParams.put("x-uploadthing-version", localVarApiClient.parameterToString(xUploadthingVersion));
        }

        if (xUploadthingFePackage != null) {
            localVarHeaderParams.put("x-uploadthing-fe-package", localVarApiClient.parameterToString(xUploadthingFePackage));
        }

        if (xUploadthingBeAdapter != null) {
            localVarHeaderParams.put("x-uploadthing-be-adapter", localVarApiClient.parameterToString(xUploadthingBeAdapter));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call requestPresignedUrlsValidateBeforeCall(String xUploadthingVersion, String xUploadthingFePackage, String xUploadthingBeAdapter, FileRequestPresignedUrlsRequest fileRequestPresignedUrlsRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xUploadthingVersion' is set
        if (xUploadthingVersion == null) {
            throw new ApiException("Missing the required parameter 'xUploadthingVersion' when calling requestPresignedUrls(Async)");
        }

        return requestPresignedUrlsCall(xUploadthingVersion, xUploadthingFePackage, xUploadthingBeAdapter, fileRequestPresignedUrlsRequest, _callback);

    }


    private ApiResponse<FileRequestPresignedUrlsResponse> requestPresignedUrlsWithHttpInfo(String xUploadthingVersion, String xUploadthingFePackage, String xUploadthingBeAdapter, FileRequestPresignedUrlsRequest fileRequestPresignedUrlsRequest) throws ApiException {
        okhttp3.Call localVarCall = requestPresignedUrlsValidateBeforeCall(xUploadthingVersion, xUploadthingFePackage, xUploadthingBeAdapter, fileRequestPresignedUrlsRequest, null);
        Type localVarReturnType = new TypeToken<FileRequestPresignedUrlsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call requestPresignedUrlsAsync(String xUploadthingVersion, String xUploadthingFePackage, String xUploadthingBeAdapter, FileRequestPresignedUrlsRequest fileRequestPresignedUrlsRequest, final ApiCallback<FileRequestPresignedUrlsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = requestPresignedUrlsValidateBeforeCall(xUploadthingVersion, xUploadthingFePackage, xUploadthingBeAdapter, fileRequestPresignedUrlsRequest, _callback);
        Type localVarReturnType = new TypeToken<FileRequestPresignedUrlsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class RequestPresignedUrlsRequestBuilder {
        private final List<FileRequestPresignedUrlsRequestFilesInner> files;
        private final String contentDisposition;
        private final String xUploadthingVersion;
        private String acl;
        private Object metadata;
        private String xUploadthingFePackage;
        private String xUploadthingBeAdapter;

        private RequestPresignedUrlsRequestBuilder(List<FileRequestPresignedUrlsRequestFilesInner> files, String contentDisposition, String xUploadthingVersion) {
            this.files = files;
            this.contentDisposition = contentDisposition;
            this.xUploadthingVersion = xUploadthingVersion;
        }

        /**
         * Set acl
         * @param acl  (optional)
         * @return RequestPresignedUrlsRequestBuilder
         */
        public RequestPresignedUrlsRequestBuilder acl(String acl) {
            this.acl = acl;
            return this;
        }
        
        /**
         * Set metadata
         * @param metadata  (optional)
         * @return RequestPresignedUrlsRequestBuilder
         */
        public RequestPresignedUrlsRequestBuilder metadata(Object metadata) {
            this.metadata = metadata;
            return this;
        }
        
        /**
         * Set xUploadthingFePackage
         * @param xUploadthingFePackage  (optional)
         * @return RequestPresignedUrlsRequestBuilder
         */
        public RequestPresignedUrlsRequestBuilder xUploadthingFePackage(String xUploadthingFePackage) {
            this.xUploadthingFePackage = xUploadthingFePackage;
            return this;
        }
        
        /**
         * Set xUploadthingBeAdapter
         * @param xUploadthingBeAdapter  (optional)
         * @return RequestPresignedUrlsRequestBuilder
         */
        public RequestPresignedUrlsRequestBuilder xUploadthingBeAdapter(String xUploadthingBeAdapter) {
            this.xUploadthingBeAdapter = xUploadthingBeAdapter;
            return this;
        }
        
        /**
         * Build call for requestPresignedUrls
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully retrieved presigned URLs. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            FileRequestPresignedUrlsRequest fileRequestPresignedUrlsRequest = buildBodyParams();
            return requestPresignedUrlsCall(xUploadthingVersion, xUploadthingFePackage, xUploadthingBeAdapter, fileRequestPresignedUrlsRequest, _callback);
        }

        private FileRequestPresignedUrlsRequest buildBodyParams() {
            FileRequestPresignedUrlsRequest fileRequestPresignedUrlsRequest = new FileRequestPresignedUrlsRequest();
            fileRequestPresignedUrlsRequest.files(this.files);
            if (this.acl != null)
            fileRequestPresignedUrlsRequest.acl(FileRequestPresignedUrlsRequest.AclEnum.fromValue(this.acl));
            fileRequestPresignedUrlsRequest.metadata(this.metadata);
            if (this.contentDisposition != null)
            fileRequestPresignedUrlsRequest.contentDisposition(FileRequestPresignedUrlsRequest.ContentDispositionEnum.fromValue(this.contentDisposition));
            return fileRequestPresignedUrlsRequest;
        }

        /**
         * Execute requestPresignedUrls request
         * @return FileRequestPresignedUrlsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully retrieved presigned URLs. </td><td>  -  </td></tr>
         </table>
         */
        public FileRequestPresignedUrlsResponse execute() throws ApiException {
            FileRequestPresignedUrlsRequest fileRequestPresignedUrlsRequest = buildBodyParams();
            ApiResponse<FileRequestPresignedUrlsResponse> localVarResp = requestPresignedUrlsWithHttpInfo(xUploadthingVersion, xUploadthingFePackage, xUploadthingBeAdapter, fileRequestPresignedUrlsRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute requestPresignedUrls request with HTTP info returned
         * @return ApiResponse&lt;FileRequestPresignedUrlsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully retrieved presigned URLs. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<FileRequestPresignedUrlsResponse> executeWithHttpInfo() throws ApiException {
            FileRequestPresignedUrlsRequest fileRequestPresignedUrlsRequest = buildBodyParams();
            return requestPresignedUrlsWithHttpInfo(xUploadthingVersion, xUploadthingFePackage, xUploadthingBeAdapter, fileRequestPresignedUrlsRequest);
        }

        /**
         * Execute requestPresignedUrls request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully retrieved presigned URLs. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<FileRequestPresignedUrlsResponse> _callback) throws ApiException {
            FileRequestPresignedUrlsRequest fileRequestPresignedUrlsRequest = buildBodyParams();
            return requestPresignedUrlsAsync(xUploadthingVersion, xUploadthingFePackage, xUploadthingBeAdapter, fileRequestPresignedUrlsRequest, _callback);
        }
    }

    /**
     * 
     * Request presigned URLs for file uploads without file routes. NOTE: This spec complies with SDK versions ^6.4. Response may vary for older versions.
     * @param xUploadthingVersion  (required)
     * @return RequestPresignedUrlsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved presigned URLs. </td><td>  -  </td></tr>
     </table>
     */
    public RequestPresignedUrlsRequestBuilder requestPresignedUrls(List<FileRequestPresignedUrlsRequestFilesInner> files, String contentDisposition, String xUploadthingVersion) throws IllegalArgumentException {
        if (files == null) throw new IllegalArgumentException("\"files\" is required but got null");
        if (contentDisposition == null) throw new IllegalArgumentException("\"contentDisposition\" is required but got null");
            

        if (xUploadthingVersion == null) throw new IllegalArgumentException("\"xUploadthingVersion\" is required but got null");
            

        return new RequestPresignedUrlsRequestBuilder(files, contentDisposition, xUploadthingVersion);
    }
    private okhttp3.Call updateFileNameCall(String xUploadthingVersion, String xUploadthingFePackage, String xUploadthingBeAdapter, FileUpdateFileNameRequest fileUpdateFileNameRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = fileUpdateFileNameRequest;

        // create path and map variables
        String localVarPath = "/renameFile";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xUploadthingVersion != null) {
            localVarHeaderParams.put("x-uploadthing-version", localVarApiClient.parameterToString(xUploadthingVersion));
        }

        if (xUploadthingFePackage != null) {
            localVarHeaderParams.put("x-uploadthing-fe-package", localVarApiClient.parameterToString(xUploadthingFePackage));
        }

        if (xUploadthingBeAdapter != null) {
            localVarHeaderParams.put("x-uploadthing-be-adapter", localVarApiClient.parameterToString(xUploadthingBeAdapter));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateFileNameValidateBeforeCall(String xUploadthingVersion, String xUploadthingFePackage, String xUploadthingBeAdapter, FileUpdateFileNameRequest fileUpdateFileNameRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xUploadthingVersion' is set
        if (xUploadthingVersion == null) {
            throw new ApiException("Missing the required parameter 'xUploadthingVersion' when calling updateFileName(Async)");
        }

        return updateFileNameCall(xUploadthingVersion, xUploadthingFePackage, xUploadthingBeAdapter, fileUpdateFileNameRequest, _callback);

    }


    private ApiResponse<FileUpdateFileNameResponse> updateFileNameWithHttpInfo(String xUploadthingVersion, String xUploadthingFePackage, String xUploadthingBeAdapter, FileUpdateFileNameRequest fileUpdateFileNameRequest) throws ApiException {
        okhttp3.Call localVarCall = updateFileNameValidateBeforeCall(xUploadthingVersion, xUploadthingFePackage, xUploadthingBeAdapter, fileUpdateFileNameRequest, null);
        Type localVarReturnType = new TypeToken<FileUpdateFileNameResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateFileNameAsync(String xUploadthingVersion, String xUploadthingFePackage, String xUploadthingBeAdapter, FileUpdateFileNameRequest fileUpdateFileNameRequest, final ApiCallback<FileUpdateFileNameResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateFileNameValidateBeforeCall(xUploadthingVersion, xUploadthingFePackage, xUploadthingBeAdapter, fileUpdateFileNameRequest, _callback);
        Type localVarReturnType = new TypeToken<FileUpdateFileNameResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateFileNameRequestBuilder {
        private final List<FileRenameFilesRequestUpdatesInner> updates;
        private final String xUploadthingVersion;
        private String xUploadthingFePackage;
        private String xUploadthingBeAdapter;

        private UpdateFileNameRequestBuilder(List<FileRenameFilesRequestUpdatesInner> updates, String xUploadthingVersion) {
            this.updates = updates;
            this.xUploadthingVersion = xUploadthingVersion;
        }

        /**
         * Set xUploadthingFePackage
         * @param xUploadthingFePackage  (optional)
         * @return UpdateFileNameRequestBuilder
         */
        public UpdateFileNameRequestBuilder xUploadthingFePackage(String xUploadthingFePackage) {
            this.xUploadthingFePackage = xUploadthingFePackage;
            return this;
        }
        
        /**
         * Set xUploadthingBeAdapter
         * @param xUploadthingBeAdapter  (optional)
         * @return UpdateFileNameRequestBuilder
         */
        public UpdateFileNameRequestBuilder xUploadthingBeAdapter(String xUploadthingBeAdapter) {
            this.xUploadthingBeAdapter = xUploadthingBeAdapter;
            return this;
        }
        
        /**
         * Build call for updateFileName
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully renamed files. </td><td>  -  </td></tr>
         </table>
         * @deprecated
         */
        @Deprecated
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            FileUpdateFileNameRequest fileUpdateFileNameRequest = buildBodyParams();
            return updateFileNameCall(xUploadthingVersion, xUploadthingFePackage, xUploadthingBeAdapter, fileUpdateFileNameRequest, _callback);
        }

        private FileUpdateFileNameRequest buildBodyParams() {
            FileUpdateFileNameRequest fileUpdateFileNameRequest = new FileUpdateFileNameRequest();
            fileUpdateFileNameRequest.updates(this.updates);
            return fileUpdateFileNameRequest;
        }

        /**
         * Execute updateFileName request
         * @return FileUpdateFileNameResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully renamed files. </td><td>  -  </td></tr>
         </table>
         * @deprecated
         */
        @Deprecated
        public FileUpdateFileNameResponse execute() throws ApiException {
            FileUpdateFileNameRequest fileUpdateFileNameRequest = buildBodyParams();
            ApiResponse<FileUpdateFileNameResponse> localVarResp = updateFileNameWithHttpInfo(xUploadthingVersion, xUploadthingFePackage, xUploadthingBeAdapter, fileUpdateFileNameRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateFileName request with HTTP info returned
         * @return ApiResponse&lt;FileUpdateFileNameResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully renamed files. </td><td>  -  </td></tr>
         </table>
         * @deprecated
         */
        @Deprecated
        public ApiResponse<FileUpdateFileNameResponse> executeWithHttpInfo() throws ApiException {
            FileUpdateFileNameRequest fileUpdateFileNameRequest = buildBodyParams();
            return updateFileNameWithHttpInfo(xUploadthingVersion, xUploadthingFePackage, xUploadthingBeAdapter, fileUpdateFileNameRequest);
        }

        /**
         * Execute updateFileName request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully renamed files. </td><td>  -  </td></tr>
         </table>
         * @deprecated
         */
        @Deprecated
        public okhttp3.Call executeAsync(final ApiCallback<FileUpdateFileNameResponse> _callback) throws ApiException {
            FileUpdateFileNameRequest fileUpdateFileNameRequest = buildBodyParams();
            return updateFileNameAsync(xUploadthingVersion, xUploadthingFePackage, xUploadthingBeAdapter, fileUpdateFileNameRequest, _callback);
        }
    }

    /**
     * 
     * Use /renameFiles instead.
     * @param xUploadthingVersion  (required)
     * @return UpdateFileNameRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully renamed files. </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public UpdateFileNameRequestBuilder updateFileName(List<FileRenameFilesRequestUpdatesInner> updates, String xUploadthingVersion) throws IllegalArgumentException {
        if (updates == null) throw new IllegalArgumentException("\"updates\" is required but got null");
        if (xUploadthingVersion == null) throw new IllegalArgumentException("\"xUploadthingVersion\" is required but got null");
            

        return new UpdateFileNameRequestBuilder(updates, xUploadthingVersion);
    }
}
