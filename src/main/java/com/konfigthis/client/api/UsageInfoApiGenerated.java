/*
 * UploadThing REST API
 * UploadThing is the easiest way to add file uploads to your full stack TypeScript application. Many services have tried to build a \"better S3\", but in our opinion, none found the right compromise of ownership, flexibility and safety.
 *
 * The version of the OpenAPI document: 6.4.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.UsageInfoGetUsageInfoResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class UsageInfoApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public UsageInfoApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public UsageInfoApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        if (apiClient.getApiKeyAuth() == null) {
            throw new IllegalArgumentException("\"x-uploadthing-api-key\" is required but no API key was provided. Please set \"x-uploadthing-api-key\" with ApiClient#setApiKeyAuth(String).");
        }
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call getUsageInfoCall(String xUploadthingVersion, String xUploadthingFePackage, String xUploadthingBeAdapter, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/getUsageInfo";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xUploadthingVersion != null) {
            localVarHeaderParams.put("x-uploadthing-version", localVarApiClient.parameterToString(xUploadthingVersion));
        }

        if (xUploadthingFePackage != null) {
            localVarHeaderParams.put("x-uploadthing-fe-package", localVarApiClient.parameterToString(xUploadthingFePackage));
        }

        if (xUploadthingBeAdapter != null) {
            localVarHeaderParams.put("x-uploadthing-be-adapter", localVarApiClient.parameterToString(xUploadthingBeAdapter));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getUsageInfoValidateBeforeCall(String xUploadthingVersion, String xUploadthingFePackage, String xUploadthingBeAdapter, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xUploadthingVersion' is set
        if (xUploadthingVersion == null) {
            throw new ApiException("Missing the required parameter 'xUploadthingVersion' when calling getUsageInfo(Async)");
        }

        return getUsageInfoCall(xUploadthingVersion, xUploadthingFePackage, xUploadthingBeAdapter, _callback);

    }


    private ApiResponse<UsageInfoGetUsageInfoResponse> getUsageInfoWithHttpInfo(String xUploadthingVersion, String xUploadthingFePackage, String xUploadthingBeAdapter) throws ApiException {
        okhttp3.Call localVarCall = getUsageInfoValidateBeforeCall(xUploadthingVersion, xUploadthingFePackage, xUploadthingBeAdapter, null);
        Type localVarReturnType = new TypeToken<UsageInfoGetUsageInfoResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getUsageInfoAsync(String xUploadthingVersion, String xUploadthingFePackage, String xUploadthingBeAdapter, final ApiCallback<UsageInfoGetUsageInfoResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getUsageInfoValidateBeforeCall(xUploadthingVersion, xUploadthingFePackage, xUploadthingBeAdapter, _callback);
        Type localVarReturnType = new TypeToken<UsageInfoGetUsageInfoResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetUsageInfoRequestBuilder {
        private final String xUploadthingVersion;
        private String xUploadthingFePackage;
        private String xUploadthingBeAdapter;

        private GetUsageInfoRequestBuilder(String xUploadthingVersion) {
            this.xUploadthingVersion = xUploadthingVersion;
        }

        /**
         * Set xUploadthingFePackage
         * @param xUploadthingFePackage  (optional)
         * @return GetUsageInfoRequestBuilder
         */
        public GetUsageInfoRequestBuilder xUploadthingFePackage(String xUploadthingFePackage) {
            this.xUploadthingFePackage = xUploadthingFePackage;
            return this;
        }
        
        /**
         * Set xUploadthingBeAdapter
         * @param xUploadthingBeAdapter  (optional)
         * @return GetUsageInfoRequestBuilder
         */
        public GetUsageInfoRequestBuilder xUploadthingBeAdapter(String xUploadthingBeAdapter) {
            this.xUploadthingBeAdapter = xUploadthingBeAdapter;
            return this;
        }
        
        /**
         * Build call for getUsageInfo
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully retrieved usage info. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getUsageInfoCall(xUploadthingVersion, xUploadthingFePackage, xUploadthingBeAdapter, _callback);
        }


        /**
         * Execute getUsageInfo request
         * @return UsageInfoGetUsageInfoResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully retrieved usage info. </td><td>  -  </td></tr>
         </table>
         */
        public UsageInfoGetUsageInfoResponse execute() throws ApiException {
            ApiResponse<UsageInfoGetUsageInfoResponse> localVarResp = getUsageInfoWithHttpInfo(xUploadthingVersion, xUploadthingFePackage, xUploadthingBeAdapter);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getUsageInfo request with HTTP info returned
         * @return ApiResponse&lt;UsageInfoGetUsageInfoResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully retrieved usage info. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<UsageInfoGetUsageInfoResponse> executeWithHttpInfo() throws ApiException {
            return getUsageInfoWithHttpInfo(xUploadthingVersion, xUploadthingFePackage, xUploadthingBeAdapter);
        }

        /**
         * Execute getUsageInfo request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully retrieved usage info. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<UsageInfoGetUsageInfoResponse> _callback) throws ApiException {
            return getUsageInfoAsync(xUploadthingVersion, xUploadthingFePackage, xUploadthingBeAdapter, _callback);
        }
    }

    /**
     * 
     * Retrieve usage info for the app associated with the provided API key.
     * @param xUploadthingVersion  (required)
     * @return GetUsageInfoRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved usage info. </td><td>  -  </td></tr>
     </table>
     */
    public GetUsageInfoRequestBuilder getUsageInfo(String xUploadthingVersion) throws IllegalArgumentException {
        if (xUploadthingVersion == null) throw new IllegalArgumentException("\"xUploadthingVersion\" is required but got null");
            

        return new GetUsageInfoRequestBuilder(xUploadthingVersion);
    }
}
