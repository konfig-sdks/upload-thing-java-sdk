/*
 * UploadThing REST API
 * UploadThing is the easiest way to add file uploads to your full stack TypeScript application. Many services have tried to build a \"better S3\", but in our opinion, none found the right compromise of ownership, flexibility and safety.
 *
 * The version of the OpenAPI document: 6.4.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.model.FileGetFileUrlsRequest;
import com.konfigthis.client.model.FileGetFileUrlsResponse;
import com.konfigthis.client.model.FileListFilesRequest;
import com.konfigthis.client.model.FileListFilesResponse;
import com.konfigthis.client.model.FileMarkForDeletionRequest;
import com.konfigthis.client.model.FileMarkForDeletionResponse;
import com.konfigthis.client.model.FileRenameFilesRequest;
import com.konfigthis.client.model.FileRenameFilesRequestUpdatesInner;
import com.konfigthis.client.model.FileRenameFilesResponse;
import com.konfigthis.client.model.FileRequestPresignedUrlRequest;
import com.konfigthis.client.model.FileRequestPresignedUrlResponse;
import com.konfigthis.client.model.FileRequestPresignedUrlsRequest;
import com.konfigthis.client.model.FileRequestPresignedUrlsRequestFilesInner;
import com.konfigthis.client.model.FileRequestPresignedUrlsResponse;
import com.konfigthis.client.model.FileUpdateFileNameRequest;
import com.konfigthis.client.model.FileUpdateFileNameResponse;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for FileApi
 */
@Disabled
public class FileApiTest {

    private static FileApi api;

    
    @BeforeAll
    public static void beforeClass() {
        ApiClient apiClient = Configuration.getDefaultApiClient();
        api = new FileApi(apiClient);
    }

    /**
     * Get a list of URLs for given file keys. This API is deprecated, use &#x60;https://utfs.io/f/FILE_KEY&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getFileUrlsTest() throws ApiException {
        String xUploadthingVersion = null;
        List<String> files = null;
        List<String> fileKeys = null;
        List<String> customIds = null;
        String xUploadthingFePackage = null;
        String xUploadthingBeAdapter = null;
        FileGetFileUrlsResponse response = api.getFileUrls(xUploadthingVersion)
                .files(files)
                .fileKeys(fileKeys)
                .customIds(customIds)
                .xUploadthingFePackage(xUploadthingFePackage)
                .xUploadthingBeAdapter(xUploadthingBeAdapter)
                .execute();
        // TODO: test validations
    }

    /**
     * List files for the current app. Response is paginated.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listFilesTest() throws ApiException {
        Double limit = null;
        Double offset = null;
        String xUploadthingVersion = null;
        String xUploadthingFePackage = null;
        String xUploadthingBeAdapter = null;
        FileListFilesResponse response = api.listFiles(limit, offset, xUploadthingVersion)
                .xUploadthingFePackage(xUploadthingFePackage)
                .xUploadthingBeAdapter(xUploadthingBeAdapter)
                .execute();
        // TODO: test validations
    }

    /**
     * Mark files for deletion. The files will be deleted at the storage provider shortly after.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void markForDeletionTest() throws ApiException {
        String xUploadthingVersion = null;
        List<String> files = null;
        List<String> fileKeys = null;
        List<String> customIds = null;
        String xUploadthingFePackage = null;
        String xUploadthingBeAdapter = null;
        FileMarkForDeletionResponse response = api.markForDeletion(xUploadthingVersion)
                .files(files)
                .fileKeys(fileKeys)
                .customIds(customIds)
                .xUploadthingFePackage(xUploadthingFePackage)
                .xUploadthingBeAdapter(xUploadthingBeAdapter)
                .execute();
        // TODO: test validations
    }

    /**
     * Rename files.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void renameFilesTest() throws ApiException {
        List<FileRenameFilesRequestUpdatesInner> updates = null;
        String xUploadthingVersion = null;
        String xUploadthingFePackage = null;
        String xUploadthingBeAdapter = null;
        FileRenameFilesResponse response = api.renameFiles(updates, xUploadthingVersion)
                .xUploadthingFePackage(xUploadthingFePackage)
                .xUploadthingBeAdapter(xUploadthingBeAdapter)
                .execute();
        // TODO: test validations
    }

    /**
     * Request a presigned GET url for a private file.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void requestPresignedUrlTest() throws ApiException {
        String xUploadthingVersion = null;
        String fileKey = null;
        String customId = null;
        Double expiresIn = null;
        String xUploadthingFePackage = null;
        String xUploadthingBeAdapter = null;
        FileRequestPresignedUrlResponse response = api.requestPresignedUrl(xUploadthingVersion)
                .fileKey(fileKey)
                .customId(customId)
                .expiresIn(expiresIn)
                .xUploadthingFePackage(xUploadthingFePackage)
                .xUploadthingBeAdapter(xUploadthingBeAdapter)
                .execute();
        // TODO: test validations
    }

    /**
     * Request presigned URLs for file uploads without file routes. NOTE: This spec complies with SDK versions ^6.4. Response may vary for older versions.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void requestPresignedUrlsTest() throws ApiException {
        List<FileRequestPresignedUrlsRequestFilesInner> files = null;
        String contentDisposition = null;
        String xUploadthingVersion = null;
        String acl = null;
        Object metadata = null;
        String xUploadthingFePackage = null;
        String xUploadthingBeAdapter = null;
        FileRequestPresignedUrlsResponse response = api.requestPresignedUrls(files, contentDisposition, xUploadthingVersion)
                .acl(acl)
                .metadata(metadata)
                .xUploadthingFePackage(xUploadthingFePackage)
                .xUploadthingBeAdapter(xUploadthingBeAdapter)
                .execute();
        // TODO: test validations
    }

    /**
     * Use /renameFiles instead.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateFileNameTest() throws ApiException {
        List<FileRenameFilesRequestUpdatesInner> updates = null;
        String xUploadthingVersion = null;
        String xUploadthingFePackage = null;
        String xUploadthingBeAdapter = null;
        FileUpdateFileNameResponse response = api.updateFileName(updates, xUploadthingVersion)
                .xUploadthingFePackage(xUploadthingFePackage)
                .xUploadthingBeAdapter(xUploadthingBeAdapter)
                .execute();
        // TODO: test validations
    }

}
